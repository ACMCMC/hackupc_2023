"database/sql"
    _ "github.com/lib/pq"


getData("testingresource123","testingquery")
insertData("testingresource","testingquery","testingresult")


func insertData(resource string, query string, result string) error {
    // Set up the database connection
    db, err := sql.Open("postgres", "postgres://ksbeiabwhtohbm:9f42d411affdaf0159e4361308518d5b1cdce7cd1178ce7c8f1c9022725c253f@ec2-52-215-68-14.eu-west-1.compute.amazonaws.com/d5s4cc0i9uhpqe")
    if err != nil {
		log.Fatal(err)
        return err
    }
    defer db.Close()
	fmt.Printf("Connected to database")
    // Prepare the SQL statement for insertion
    stmt, err := db.Prepare("INSERT INTO public.\"Cache_DB\" (resource, query, result) VALUES ($1, $2, $3)")
    if err != nil {
        return err
    }
    defer stmt.Close()
	fmt.Printf("Prepared statement")
    // Execute the SQL statement with the provided data
    _, err = stmt.Exec(resource, query, result)
    if err != nil {
		log.Fatal(err)
        return err
    }
	fmt.Printf("Inserted data")
    return nil
}

type Data struct {
	Resource string
	Query string
	Result string
}

func getData(resource, query string) ([]Data, error) {
    // Set up the database connection
    db, err := sql.Open("postgres", "postgres://ksbeiabwhtohbm:9f42d411affdaf0159e4361308518d5b1cdce7cd1178ce7c8f1c9022725c253f@ec2-52-215-68-14.eu-west-1.compute.amazonaws.com/d5s4cc0i9uhpqe")
    if err != nil {
        return nil, err
    }
    defer db.Close()

    // Prepare the SQL statement for selecting data with the specified resource and query values
    rows, err := db.Query("SELECT resource, query, result FROM public.\"Cache_DB\" WHERE resource = $1 AND query = $2", resource, query)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    // Iterate through the rows and store the data in a slice
    var data []Data
    for rows.Next() {
        var resource string
        var query string
        var result string
        err := rows.Scan(&resource, &query, &result)
        if err != nil {
            return nil, err
        }
        data = append(data, Data{Resource: resource, Query: query, Result: result})
    }
    err = rows.Err()
    if err != nil {
        return nil, err
    }

    return data, nil
}

